import Head from 'next/head';
import { io } from 'socket.io-client';
import { useRouter } from 'next/router';
import Footer from '@/comps/Footer';
import { useEffect, useState, useContext } from 'react'
import ClubsCom from '@/comps/ClubsCom';
import Nav from '@/comps/Nav'
import { comp_theme, order_method, text_theme } from '../../utils/variables'
import { useTheme,useClublist, useUser,useMyClublist } from '../../utils/provider'
import { useRead, useIstatus } from '@/utils/provider'
import FriendPic from '@/comps/FriendPic';
import Button from '@mui/material/Button';
import { Icon } from 'semantic-ui-react'
import Message from '@/comps/Message';
import Message_own from '@/comps/Message_own';
import { ConstructionOutlined, ExitToApp } from '@mui/icons-material';
import { getOneClub } from '@/utils/getData/clubHandler';
import ReadListCom from '@/comps/ReadListCom';



export default function ClubsID() {
  const router = useRouter();
  const { id } = router.query;
  const [data, setData] = useState(null)
  const { theme } = useTheme();
  const { user } = useUser()
  const { clublist, setClublist } = useClublist();
  const { myclublist, setMyClublist } = useMyClublist();
  const [heartIcon, setHeartIcon] = useState()
  const [mySocket, setMySocket] = useState()
  const [member, setMember] = useState()
  const [chatUsers, setChatUsers] = useState([])
  const [chats, setChats] = useState([{user: 'Host', text: 'Welcome!' }])
  const [room, setRoom] = useState()
  const [inRoom, setInRoom] = useState(false)
  const [txt, setTxt] = useState()
  const [clubBookList, setClubBookList] = useState([])

  const default_member_img = "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NTd8fHBlb3BsZXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60"

  
  useEffect(()=>{

      if(user == null) return router.push('/')

      const getClub = async (p) => {
        const TK = user.accessTk
        const clubID = id
        const res = await getOneClub(TK, clubID)
        setData(res.club)
        setMember(res.club.members)
        setClubBookList(res.club.bookList)
        setRoom(res.club.title)
      }

      if (id) {
        if(Object.keys(myclublist).includes(id)){
          setHeartIcon('heart')
        }else{
          setHeartIcon('heart outline')
        }
      }
      getClub()

  },[])
  
  
  const joinChat = async () => {
      const username = user.username
      const URL = process.env.SOCKET_URL

      const socket = io(URL, {auth: {tk: username }})

      socket.on("connect", ()=> {
          console.log(`Welcome user: ${socket.id}`)
          setInRoom(true)
      })

      socket.emit('join_room', room)

      socket.on("conn_id", (u)=>{
          setChatUsers(u)
      })

      socket.on('joined', (u, txt)=>{
          setChats((pre)=>([
              ...pre,
              {user: u.name, text: txt }
          ]))
      })
      setMySocket(socket)
  }

  const exitChat = async () => {
     setMySocket(null)
     setInRoom(false)
  }

  const sendTxt = async () => {
    if(mySocket != null){
        mySocket.emit('user_ready', txt, room)
    }
  }

  const heartClick = (value, obj) => {
    if (heartIcon == 'heart outline') {
      setHeartIcon('heart')

      const n_myclublist = { ...myclublist }
      n_myclublist[obj._id] = obj;
      // var key="aaa"
      // n_fav[key]=obj;
      setMyClublist(n_myclublist)
      // setIStatus(heartIcon)
      // console.log(istatus)
    }
    else {
      setHeartIcon('heart outline')
      const n_myclublist = {
        ...myclublist
      }
      delete n_myclublist[obj._id];
      setMyClublist(n_myclublist)

    }

  }

  return <div>
    <Head>
      <title>Echo</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <div className='sB_Wrapper'>
      <div className='Container' >
        <div className='Nav'>
        {user ?
        <Nav onClick={()=>router.push('/bookShelf/search')} users= {user.username}  />
        :   <Nav onClick={()=>router.push('/bookShelf/search')}  />  }
        </div>
        <div className='Content' >
          <div className='Side_Bar'>

            { data!=undefined?
              <ClubsCom
                // src={data.image}
                title={data.title}
                host={data.host.username}
                members={data.member_count}
                create_date={data.create_date}
                // Publisher={data.publisher}
                heartClick={(e) => heartClick(e.target.value, data)}
                iconName={heartIcon}
              />
              :
              null
            }

            <div className='members' style={{
              background: comp_theme[theme].label2,
              color: text_theme[theme].label
            }}>
              <div className='title'> Members</div>

              <div className='membersContent'>
                { member != undefined?
                  member.map((o) =>
                    <FriendPic width={35} height={35} key={o.memberID._id} src={default_member_img} name={o.memberID.username}/>
                  )
                  :
                  null
                }
              </div>

            </div>
          </div>
          <div className='clubContent'>
            <div className='books'>
              <div className='topTen' style={{
                backgroundColor: comp_theme[theme].label2,
                color: text_theme[theme].label
              }}>
                <div className='title'>Top Ten</div>
                <div className='content'>
                  { clubBookList !== undefined || clubBookList.length!==[]? 
                    clubBookList.slice(0,10).map((li)=>(
                        <ReadListCom 
                        key={li.bookID._id}
                        text={li.bookID.title}
                        
                        />
                        
                       
                    ))
                    :
                    null
                  }
                  
                </div>
              </div>
              <div className='recommendation' style={{
                backgroundColor: comp_theme[theme].label2,
                color: text_theme[theme].label
              }}>
                <div className='title'>Recommendation list</div>
                <div className='content'>
                  { clubBookList != undefined? 
                    clubBookList.map((li)=>(
                      <ReadListCom 
                      key={li.bookID._id}
                      text={li.bookID.title}
                      
                      />
                       
                    ))
                    :
                    null
                  }
                </div>
              </div>
            </div>

            <div className='chatChannel'
              style={{
                backgroundColor: comp_theme[theme].label2,
                color: text_theme[theme].label
              }}>
              
              <div style={{width: '100%', display: 'flex', flexDirection: 'row'}}>
                <div className='title'>Chat Channel</div>
                
                <div>
                  {inRoom?
                    `IN`
                    :
                    `OUT`
                  }
                </div>
                
                <button 
                    style={{width: 60, height: 30, marginTop: 15, marginRight: 15}} 
                    onClick={joinChat}
                >Join
                </button>
                <button 
                    style={{width: 60, height: 30, marginTop: 15, marginRight: 15}} 
                    onClick={exitChat}
                >Exit
                </button>


              </div>
              <div className='content'>

                {chats!=undefined? 
                  chats.map((c, i)=>(
                    <div key={i}>
                      {c.user==user.username?
                        <Message_own member={c.user} message={c.text}/>
                        :
                        <Message member={c.user} message={c.text}/>
                      }
                    </div>
                  ))
                  :
                  <div>Loading...</div>
                }

              </div>

              <div className='input'>
                <input  onChange={e => setTxt(e.target.value)}/>
                <Button variant="contained"
                  style={{ background: text_theme[theme].title, color: text_theme[theme].label }} 
                onClick={sendTxt}
                >
                  <Icon name='paper plane' size='large' />
                </Button>
              </div>

            </div>
          </div>
        </div>
        <Footer />
      </div>
    </div>
  </div>
}



